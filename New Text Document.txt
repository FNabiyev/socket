path('ws/book/', BookSocket.as_asgi()),


class BookSocket(AsyncWebsocketConsumer):

    async def connect(self):
        # self.room_name = self.scope['url_route']['kwargs']['room_name']
        self.room_group_name = 'book'

        # Join room group
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )

        await self.accept()

    async def disconnect(self, close_code):
        # Leave room group
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

    async def receive(self, text_data):
        data = json.loads(text_data)
        send_data = await self.ReciveData(data)
        # await self.send(text_data=json.dumps(send_data))

        # Send message to room group
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'book',
                'message': data
            }
        )

    # Receive message from room group
    async def book(self, event):
        data = event['message']

        # Send message to WebSocket
        await self.send(text_data=json.dumps(data))

    async def ReciveData(self, data):
        if data['type'] == "book0":
            data['data'] = await self.book0()
        elif data['type'] == "book1":
            data['data'] = await self.book1()
        elif data['type'] == "busy1":
            data['data'] = await self.busy1(data['data'])
        elif data['type'] == "busy0":
            data['data'] = await self.busy0(data['id'])

        return data

    @database_sync_to_async
    def book0(self):
        books = Books.objects.filter(status=False)
        dt = []
        for r in books:
            t = {
                'id': r.id,
                'author': r.author.name,
                'book': r.name,
            }
            dt.append(t)
        data = {
            'type': 'book0',
            'books': dt
        }
        return data

    @database_sync_to_async
    def book1(self):
        books = Books.objects.filter(status=1)
        dt = []
        for r in books:
            t = {
                'id': r.id,
                'name': r.name,
                'author': r.author.name,
            }
            dt.append(t)
        data = {
            'type': 'book1',
            'books': dt
        }
        return data

    @database_sync_to_async
    def busy1(self, data):
        book = Books.objects.get(id=data['id'])
        book.status = 1
        book.save()

        Books.objects.create(waiter_id=data['waiter'], busyprice=data['busyprice'], book_id=data['id'])

        books0 = Books.objects.filter(status=0)
        dt0 = []
        for r in books0:
            t = {
                'id': r.id,
                'name': r.name,
                'book': r.book,
            }
            dt0.append(t)

        books1 = Books.objects.filter(status=1)
        dt1 = []
        for r in books1:
            t = {
                'id': r.id,
                'name': r.name,
                'book': r.book,
            }
            dt1.append(t)
        data = {
            'type': 'book0and1',
            'books0': dt0,
            'books1': dt1
        }
        return data

    @database_sync_to_async
    def busy0(self, id):
        book = Books.objects.get(id=id)
        book.status = 0
        book.save()

        books0 = Books.objects.filter(status=0)
        dt0 = []
        for r in books0:
            t = {
                'id': r.id,
                'name': r.name,
                'book': r.book,
            }
            dt0.append(t)

        books1 = Books.objects.filter(status=1)
        dt1 = []
        for r in books1:
            t = {
                'id': r.id,
                'name': r.name,
                'book': r.book,
            }
            dt1.append(t)
        data = {
            'type': 'book0and1',
            'books0': dt0,
            'books1': dt1
        }
        return data

